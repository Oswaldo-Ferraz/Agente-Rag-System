version: '3.8'

services:
  # PostgreSQL com pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: chat_system_postgres
    environment:
      POSTGRES_DB: chat_system_dev
      POSTGRES_USER: chat_user
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chat_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_user -d chat_system_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache e pub/sub (futuro)
  redis:
    image: redis:7-alpine
    container_name: chat_system_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  api:
    build: .
    container_name: chat_system_api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://chat_user@postgres:5432/chat_system_dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: chat_system_dev
      DB_USER: chat_user
      DB_PASSWORD: ""
      API_V1_PREFIX: /api/v1
      PROJECT_NAME: Chat System
      DEBUG: "true"
      LOG_LEVEL: INFO
      EMBEDDING_MODEL: mock
      EMBEDDING_DIMENSION: 1536
    volumes:
      - .:/app
    networks:
      - chat_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin para gerenciamento do banco (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chat_system_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chatystem.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - chat_network
    depends_on:
      - postgres
    profiles:
      - admin  # Use 'docker-compose --profile admin up' para incluir pgadmin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  chat_network:
    driver: bridge
